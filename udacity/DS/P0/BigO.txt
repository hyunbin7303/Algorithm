



# Task0.py
    Time complexity - time operations O(1) in all case.
    Wrost Case - there is no specific worst case for this since it will always execute in the same time (or space) regardless of size of the input.
 
#Task1.py
    Time complexity - O(n) in most cases.
    Wrost case - O(n) same with general case since it requires to search from the beginning anyway(even if there are unique phone number at the end of the input)

#Task2.py
    Time complexity - O(n^2) in most cases.
    
    For this task, I've used Dictionary and store data into dictionary through for loop, which requires iteration from the beginning to the end of calls.
    At the same time, I also used "Not in" which requires to search from the start to the end of dictionary.
    So, it is O(n^2) in the most cases.
    I also used max statement, which iterate through the dictionary one time. for this specific task,
    the order is not an ascending order so I would say that the most cases are O(n).
    
    Conclusion:
    Worst case - O(n^2), same with most cases.    


#Task3.py

    Part A:
    In the best case of this Task, the caller doesn't start with (080), and it this case, the time complexity is O(1)
    In the worst case, there are two if statements, so it will be O(n^2).
    After for loop, it requires sorting, so I used sorted method for set; a worst case time-complexity is O(n log n).0

    Part B: 
    In this task, there is one for loop and the worst case it needs to go through two if statements. 
    So, the wrost case, the time complexity will be like O( N + 2N).
    (On the assumption that single N is for for loop and 2N is for two if statements)

    In general, I believe that it is O(N).


#Task4.py
    For this app, I've used two for loop for getting all calls and texts. 
    So the worst case and the best case should be the same : O(2N)

    After that, it uses difference method in order to subtract from none telemarketers to outgoing.
    In the best cases, the difference method is performed with O(n) complexity.
    In the worst case, I would say O(n^2).
    For instance, the outgoing number is in the beginning, but it requires to check at the end of nontele_list method.
    

